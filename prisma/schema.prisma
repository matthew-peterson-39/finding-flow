// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id        String @id @default(cuid())
  email     String
  token     String @unique
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Task {
  id String @id @default(cuid())
  userId String
  title String
  description String?
  total_time Int @default(0) //Stored in seconds

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  flowTasks FlowTask[]
}

model Flow {
  id      String    @id @default(cuid())
  name    String
  userId  String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  flowTasks FlowTask[]
}

model FlowTask {
  id     String @id @default(cuid())
  taskId String
  flowId String

  task Task @relation(fields: [taskId], references: [id])
  flow Flow @relation(fields: [flowId], references: [id])

  @@unique([taskId, flowId])
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole @default(USER)
  accounts            Account[]
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  tasks Task[] //one-to-many relationship
  flows Flow[]
}